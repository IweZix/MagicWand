package fr.iwezix.mymod.block.custom;

import net.minecraft.core.BlockPos;
import net.minecraft.world.item.context.BlockPlaceContext;
import net.minecraft.world.level.BlockGetter;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.HorizontalDirectionalBlock;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.block.state.StateDefinition;
import net.minecraft.world.phys.shapes.BooleanOp;
import net.minecraft.world.phys.shapes.CollisionContext;
import net.minecraft.world.phys.shapes.Shapes;
import net.minecraft.world.phys.shapes.VoxelShape;

import javax.annotation.Nullable;
import java.awt.*;
import java.util.stream.Stream;

public class SignalisationInterditeBlock extends HorizontalDirectionalBlock {

    public SignalisationInterditeBlock(Properties p_54120_) {
        super(p_54120_);
    }

    public static final VoxelShape SHAPE_N =
            Stream.of(
                    Block.box(7, 10, 6, 9, 12, 7),
                    Block.box(5, 6, 6, 7, 8, 7),
                    Block.box(5, 4, 6, 7, 6, 7),
                    Block.box(5, 8, 6, 7, 10, 7),
                    Block.box(5, 10, 6, 7, 12, 7),
                    Block.box(5, 12, 6, 7, 14, 7),
                    Block.box(3, 6, 6, 5, 8, 7),
                    Block.box(3, 8, 6, 5, 10, 7),
                    Block.box(3, 10, 6, 5, 12, 7),
                    Block.box(1, 8, 6, 3, 10, 7),
                    Block.box(7, 8, 6, 9, 10, 7),
                    Block.box(11, 8, 6, 13, 10, 7),
                    Block.box(11, 6, 6, 13, 8, 7),
                    Block.box(11, 10, 6, 13, 12, 7),
                    Block.box(13, 8, 6, 15, 10, 7),
                    Block.box(9, 8, 6, 11, 10, 7),
                    Block.box(9, 6, 6, 11, 8, 7),
                    Block.box(9, 4, 6, 11, 6, 7),
                    Block.box(9, 12, 6, 11, 14, 7),
                    Block.box(9, 14, 6, 10, 15, 7),
                    Block.box(11, 12, 6, 12, 13, 7),
                    Block.box(13, 10, 6, 14, 11, 7),
                    Block.box(14, 10, 6, 14.5, 10.5, 7),
                    Block.box(13, 11, 6, 13.5, 11.5, 7),
                    Block.box(12, 12, 6, 12.5, 12.5, 7),
                    Block.box(11, 13, 6, 11.5, 13.5, 7),
                    Block.box(10, 14, 6, 10.5, 14.5, 7),
                    Block.box(9, 15, 6, 9.5, 15.5, 7),
                    Block.box(6.5, 15, 6, 7, 15.5, 7),
                    Block.box(5.5, 14, 6, 6, 14.5, 7),
                    Block.box(4.5, 13, 6, 5, 13.5, 7),
                    Block.box(2.5, 11, 6, 3, 11.5, 7),
                    Block.box(1.5, 10, 6, 2, 10.5, 7),
                    Block.box(1.5, 7.5, 6, 2, 8, 7),
                    Block.box(2.5, 6.5, 6, 3, 7, 7),
                    Block.box(3.5, 5.5, 6, 4, 6, 7),
                    Block.box(4.5, 4.5, 6, 5, 5, 7),
                    Block.box(5.5, 3.5, 6, 6, 4, 7),
                    Block.box(6.5, 2.5, 6, 7, 3, 7),
                    Block.box(9, 2.5, 6, 9.5, 3, 7),
                    Block.box(10, 3.5, 6, 10.5, 4, 7),
                    Block.box(11, 4.5, 6, 11.5, 5, 7),
                    Block.box(12, 5.5, 6, 12.5, 6, 7),
                    Block.box(13, 6.5, 6, 13.5, 7, 7),
                    Block.box(14, 7.5, 6, 14.5, 8, 7),
                    Block.box(3.5, 12, 6, 4, 12.5, 7),
                    Block.box(11, 5, 6, 12, 6, 7),
                    Block.box(9, 3, 6, 10, 4, 7),
                    Block.box(6, 3, 6, 7, 4, 7),
                    Block.box(4, 5, 6, 5, 6, 7),
                    Block.box(2, 7, 6, 3, 8, 7),
                    Block.box(2, 10, 6, 3, 11, 7),
                    Block.box(7, 0, 7, 9, 16, 9),
                    Block.box(7, 14, 6, 9, 16, 7),
                    Block.box(7, 12, 6, 9, 14, 7),
                    Block.box(7, 2, 6, 9, 4, 7),
                    Block.box(7, 4, 6, 9, 6, 7),
                    Block.box(7, 6, 6, 9, 8, 7),
                    Block.box(9, 10, 6, 11, 12, 7),
                    Block.box(13, 7, 6, 14, 8, 7),
                    Block.box(6, 14, 6, 7, 15, 7),
                    Block.box(4, 12, 6, 5, 13, 7)
            ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();

    public static final VoxelShape SHAPE_E =
            Stream.of(
                    Block.box(9.049999999999997, 9.8, 6.9499999999999975, 10.049999999999997, 11.8, 8.949999999999998),
                    Block.box(9.049999999999997, 5.800000000000001, 4.9499999999999975, 10.049999999999997, 7.800000000000001, 6.9499999999999975),
                    Block.box(9.049999999999997, 3.8, 4.9499999999999975, 10.049999999999997, 5.800000000000001, 6.9499999999999975),
                    Block.box(9.049999999999997, 7.800000000000001, 4.9499999999999975, 10.049999999999997, 9.8, 6.9499999999999975),
                    Block.box(9.049999999999997, 9.8, 4.9499999999999975, 10.049999999999997, 11.8, 6.9499999999999975),
                    Block.box(9.049999999999997, 11.8, 4.9499999999999975, 10.049999999999997, 13.8, 6.9499999999999975),
                    Block.box(9.049999999999997, 5.800000000000001, 2.9500000000000006, 10.049999999999997, 7.800000000000001, 4.9499999999999975),
                    Block.box(9.049999999999997, 7.800000000000001, 2.9500000000000006, 10.049999999999997, 9.8, 4.9499999999999975),
                    Block.box(9.049999999999997, 9.8, 2.9500000000000006, 10.049999999999997, 11.8, 4.9499999999999975),
                    Block.box(9.049999999999997, 7.800000000000001, 0.9500000000000001, 10.049999999999997, 9.8, 2.9500000000000006),
                    Block.box(9.049999999999997, 7.800000000000001, 6.9499999999999975, 10.049999999999997, 9.8, 8.949999999999998),
                    Block.box(9.049999999999997, 7.800000000000001, 10.949999999999998, 10.049999999999997, 9.8, 12.949999999999998),
                    Block.box(9.049999999999997, 5.800000000000001, 10.949999999999998, 10.049999999999997, 7.800000000000001, 12.949999999999998),
                    Block.box(9.049999999999997, 9.8, 10.949999999999998, 10.049999999999997, 11.8, 12.949999999999998),
                    Block.box(9.049999999999997, 7.800000000000001, 12.949999999999998, 10.049999999999997, 9.8, 14.949999999999998),
                    Block.box(9.049999999999997, 7.800000000000001, 8.949999999999998, 10.049999999999997, 9.8, 10.949999999999998),
                    Block.box(9.049999999999997, 5.800000000000001, 8.949999999999998, 10.049999999999997, 7.800000000000001, 10.949999999999998),
                    Block.box(9.049999999999997, 3.8, 8.949999999999998, 10.049999999999997, 5.800000000000001, 10.949999999999998),
                    Block.box(9.049999999999997, 11.8, 8.949999999999998, 10.049999999999997, 13.8, 10.949999999999998),
                    Block.box(9.049999999999997, 13.8, 8.949999999999998, 10.049999999999997, 14.8, 9.949999999999998),
                    Block.box(9.049999999999997, 11.8, 10.949999999999998, 10.049999999999997, 12.8, 11.949999999999998),
                    Block.box(9.049999999999997, 9.8, 12.949999999999998, 10.049999999999997, 10.8, 13.949999999999998),
                    Block.box(9.049999999999997, 9.8, 13.949999999999998, 10.049999999999997, 10.3, 14.449999999999998),
                    Block.box(9.049999999999997, 10.8, 12.949999999999998, 10.049999999999997, 11.3, 13.449999999999998),
                    Block.box(9.049999999999997, 11.8, 11.949999999999998, 10.049999999999997, 12.3, 12.449999999999998),
                    Block.box(9.049999999999997, 12.8, 10.949999999999998, 10.049999999999997, 13.3, 11.449999999999998),
                    Block.box(9.049999999999997, 13.8, 9.949999999999998, 10.049999999999997, 14.3, 10.449999999999998),
                    Block.box(9.049999999999997, 14.8, 8.949999999999998, 10.049999999999997, 15.3, 9.449999999999998),
                    Block.box(9.049999999999997, 14.8, 6.4499999999999975, 10.049999999999997, 15.3, 6.9499999999999975),
                    Block.box(9.049999999999997, 13.8, 5.4499999999999975, 10.049999999999997, 14.3, 5.9499999999999975),
                    Block.box(9.049999999999997, 12.8, 4.449999999999999, 10.049999999999997, 13.3, 4.9499999999999975),
                    Block.box(9.049999999999997, 10.8, 2.4500000000000006, 10.049999999999997, 11.3, 2.9500000000000006),
                    Block.box(9.049999999999997, 9.8, 1.4500000000000002, 10.049999999999997, 10.3, 1.9500000000000006),
                    Block.box(9.049999999999997, 7.300000000000001, 1.4500000000000002, 10.049999999999997, 7.800000000000001, 1.9500000000000006),
                    Block.box(9.049999999999997, 6.300000000000001, 2.4500000000000006, 10.049999999999997, 6.800000000000001, 2.9500000000000006),
                    Block.box(9.049999999999997, 5.300000000000001, 3.4500000000000006, 10.049999999999997, 5.800000000000001, 3.9500000000000006),
                    Block.box(9.049999999999997, 4.300000000000001, 4.449999999999999, 10.049999999999997, 4.800000000000001, 4.9499999999999975),
                    Block.box(9.049999999999997, 3.3, 5.4499999999999975, 10.049999999999997, 3.8, 5.9499999999999975),
                    Block.box(9.049999999999997, 2.3, 6.4499999999999975, 10.049999999999997, 2.8, 6.9499999999999975),
                    Block.box(9.049999999999997, 2.3, 8.949999999999998, 10.049999999999997, 2.8, 9.449999999999998),
                    Block.box(9.049999999999997, 3.3, 9.949999999999998, 10.049999999999997, 3.8, 10.449999999999998),
                    Block.box(9.049999999999997, 4.300000000000001, 10.949999999999998, 10.049999999999997, 4.800000000000001, 11.449999999999998),
                    Block.box(9.049999999999997, 5.300000000000001, 11.949999999999998, 10.049999999999997, 5.800000000000001, 12.449999999999998),
                    Block.box(9.049999999999997, 6.300000000000001, 12.949999999999998, 10.049999999999997, 6.800000000000001, 13.449999999999998),
                    Block.box(9.049999999999997, 7.300000000000001, 13.949999999999998, 10.049999999999997, 7.800000000000001, 14.449999999999998),
                    Block.box(9.049999999999997, 11.8, 3.4500000000000006, 10.049999999999997, 12.3, 3.9500000000000006),
                    Block.box(9.049999999999997, 4.800000000000001, 10.949999999999998, 10.049999999999997, 5.800000000000001, 11.949999999999998),
                    Block.box(9.049999999999997, 2.8, 8.949999999999998, 10.049999999999997, 3.8, 9.949999999999998),
                    Block.box(9.049999999999997, 2.8, 5.9499999999999975, 10.049999999999997, 3.8, 6.9499999999999975),
                    Block.box(9.049999999999997, 4.800000000000001, 3.9500000000000006, 10.049999999999997, 5.800000000000001, 4.9499999999999975),
                    Block.box(9.049999999999997, 6.800000000000001, 1.9500000000000006, 10.049999999999997, 7.800000000000001, 2.9500000000000006),
                    Block.box(9.049999999999997, 9.8, 1.9500000000000006, 10.049999999999997, 10.8, 2.9500000000000006),
                    Block.box(9.049999999999997, 11.8, 3.9500000000000006, 10.049999999999997, 12.8, 4.9499999999999975),
                    Block.box(9.049999999999997, 13.8, 5.9499999999999975, 10.049999999999997, 14.8, 6.9499999999999975),
                    Block.box(9.049999999999997, 6.800000000000001, 12.949999999999998, 10.049999999999997, 7.800000000000001, 13.949999999999998),
                    Block.box(9.049999999999997, 9.8, 8.949999999999998, 10.049999999999997, 11.8, 10.949999999999998),
                    Block.box(9.049999999999997, 5.800000000000001, 6.9499999999999975, 10.049999999999997, 7.800000000000001, 8.949999999999998),
                    Block.box(9.049999999999997, 3.8, 6.9499999999999975, 10.049999999999997, 5.800000000000001, 8.949999999999998),
                    Block.box(9.049999999999997, 1.7999999999999998, 6.9499999999999975, 10.049999999999997, 3.8, 8.949999999999998),
                    Block.box(9.049999999999997, 11.8, 6.9499999999999975, 10.049999999999997, 13.8, 8.949999999999998),
                    Block.box(9.049999999999997, 13.8, 6.9499999999999975, 10.049999999999997, 15.8, 8.949999999999998),
                    Block.box(7.049999999999997, -0.2, 6.9499999999999975, 9.049999999999997, 15.8, 8.949999999999998)
            ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();

    public static final VoxelShape SHAPE_S =
            Stream.of(
                    Block.box(7, 9.8, 8.999999999999995, 9, 11.8, 9.999999999999995),
                    Block.box(9, 5.800000000000001, 8.999999999999995, 11, 7.800000000000001, 9.999999999999995),
                    Block.box(9, 3.8, 8.999999999999995, 11, 5.800000000000001, 9.999999999999995),
                    Block.box(9, 7.800000000000001, 8.999999999999995, 11, 9.8, 9.999999999999995),
                    Block.box(9, 9.8, 8.999999999999995, 11, 11.8, 9.999999999999995),
                    Block.box(9, 11.8, 8.999999999999995, 11, 13.8, 9.999999999999995),
                    Block.box(11, 5.800000000000001, 8.999999999999995, 12.999999999999996, 7.800000000000001, 9.999999999999995),
                    Block.box(11, 7.800000000000001, 8.999999999999995, 12.999999999999996, 9.8, 9.999999999999995),
                    Block.box(11, 9.8, 8.999999999999995, 12.999999999999996, 11.8, 9.999999999999995),
                    Block.box(12.999999999999996, 7.800000000000001, 8.999999999999995, 14.999999999999998, 9.8, 9.999999999999995),
                    Block.box(7, 7.800000000000001, 8.999999999999995, 9, 9.8, 9.999999999999995),
                    Block.box(3.000000000000003, 7.800000000000001, 8.999999999999995, 5, 9.8, 9.999999999999995),
                    Block.box(3.000000000000003, 5.800000000000001, 8.999999999999995, 5, 7.800000000000001, 9.999999999999995),
                    Block.box(3.000000000000003, 9.8, 8.999999999999995, 5, 11.8, 9.999999999999995),
                    Block.box(1.0000000000000027, 7.800000000000001, 8.999999999999995, 3.000000000000003, 9.8, 9.999999999999995),
                    Block.box(5, 7.800000000000001, 8.999999999999995, 7, 9.8, 9.999999999999995),
                    Block.box(5, 5.800000000000001, 8.999999999999995, 7, 7.800000000000001, 9.999999999999995),
                    Block.box(5, 3.8, 8.999999999999995, 7, 5.800000000000001, 9.999999999999995),
                    Block.box(5, 11.8, 8.999999999999995, 7, 13.8, 9.999999999999995),
                    Block.box(6, 13.8, 8.999999999999995, 7, 14.8, 9.999999999999995),
                    Block.box(4.000000000000003, 11.8, 8.999999999999995, 5, 12.8, 9.999999999999995),
                    Block.box(2.000000000000003, 9.8, 8.999999999999995, 3.000000000000003, 10.8, 9.999999999999995),
                    Block.box(1.5000000000000027, 9.8, 8.999999999999995, 2.000000000000003, 10.3, 9.999999999999995),
                    Block.box(2.500000000000003, 10.8, 8.999999999999995, 3.000000000000003, 11.3, 9.999999999999995),
                    Block.box(3.500000000000003, 11.8, 8.999999999999995, 4.000000000000003, 12.3, 9.999999999999995),
                    Block.box(4.500000000000002, 12.8, 8.999999999999995, 5, 13.3, 9.999999999999995),
                    Block.box(5.5, 13.8, 8.999999999999995, 6, 14.3, 9.999999999999995),
                    Block.box(6.5, 14.8, 8.999999999999995, 7, 15.3, 9.999999999999995),
                    Block.box(9, 14.8, 8.999999999999995, 9.5, 15.3, 9.999999999999995),
                    Block.box(10, 13.8, 8.999999999999995, 10.5, 14.3, 9.999999999999995),
                    Block.box(11, 12.8, 8.999999999999995, 11.499999999999998, 13.3, 9.999999999999995),
                    Block.box(12.999999999999996, 10.8, 8.999999999999995, 13.499999999999996, 11.3, 9.999999999999995),
                    Block.box(13.999999999999996, 9.8, 8.999999999999995, 14.499999999999998, 10.3, 9.999999999999995),
                    Block.box(13.999999999999996, 7.300000000000001, 8.999999999999995, 14.499999999999998, 7.800000000000001, 9.999999999999995),
                    Block.box(12.999999999999996, 6.300000000000001, 8.999999999999995, 13.499999999999996, 6.800000000000001, 9.999999999999995),
                    Block.box(11.999999999999996, 5.300000000000001, 8.999999999999995, 12.499999999999996, 5.800000000000001, 9.999999999999995),
                    Block.box(11, 4.300000000000001, 8.999999999999995, 11.499999999999998, 4.800000000000001, 9.999999999999995),
                    Block.box(10, 3.3, 8.999999999999995, 10.5, 3.8, 9.999999999999995),
                    Block.box(9, 2.3, 8.999999999999995, 9.5, 2.8, 9.999999999999995),
                    Block.box(6.5, 2.3, 8.999999999999995, 7, 2.8, 9.999999999999995),
                    Block.box(5.5, 3.3, 8.999999999999995, 6, 3.8, 9.999999999999995),
                    Block.box(4.500000000000002, 4.300000000000001, 8.999999999999995, 5, 4.800000000000001, 9.999999999999995),
                    Block.box(3.500000000000003, 5.300000000000001, 8.999999999999995, 4.000000000000003, 5.800000000000001, 9.999999999999995),
                    Block.box(2.500000000000003, 6.300000000000001, 8.999999999999995, 3.000000000000003, 6.800000000000001, 9.999999999999995),
                    Block.box(1.5000000000000027, 7.300000000000001, 8.999999999999995, 2.000000000000003, 7.800000000000001, 9.999999999999995),
                    Block.box(11.999999999999996, 11.8, 8.999999999999995, 12.499999999999996, 12.3, 9.999999999999995),
                    Block.box(4.000000000000003, 4.800000000000001, 8.999999999999995, 5, 5.800000000000001, 9.999999999999995),
                    Block.box(6, 2.8, 8.999999999999995, 7, 3.8, 9.999999999999995),
                    Block.box(9, 2.8, 8.999999999999995, 10, 3.8, 9.999999999999995),
                    Block.box(11, 4.800000000000001, 8.999999999999995, 11.999999999999996, 5.800000000000001, 9.999999999999995),
                    Block.box(12.999999999999996, 6.800000000000001, 8.999999999999995, 13.999999999999996, 7.800000000000001, 9.999999999999995),
                    Block.box(12.999999999999996, 9.8, 8.999999999999995, 13.999999999999996, 10.8, 9.999999999999995),
                    Block.box(11, 11.8, 8.999999999999995, 11.999999999999996, 12.8, 9.999999999999995),
                    Block.box(9, 13.8, 8.999999999999995, 10, 14.8, 9.999999999999995),
                    Block.box(2.000000000000003, 6.800000000000001, 8.999999999999995, 3.000000000000003, 7.800000000000001, 9.999999999999995),
                    Block.box(5, 9.8, 8.999999999999995, 7, 11.8, 9.999999999999995),
                    Block.box(7, 5.800000000000001, 8.999999999999995, 9, 7.800000000000001, 9.999999999999995),
                    Block.box(7, 3.8, 8.999999999999995, 9, 5.800000000000001, 9.999999999999995),
                    Block.box(7, 1.7999999999999998, 8.999999999999995, 9, 3.8, 9.999999999999995),
                    Block.box(7, 11.8, 8.999999999999995, 9, 13.8, 9.999999999999995),
                    Block.box(7, 13.8, 8.999999999999995, 9, 15.8, 9.999999999999995),
                    Block.box(7, -0.2, 6.999999999999995, 9, 15.8, 8.999999999999995)
            ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();

    public static final VoxelShape SHAPE_W =
            Stream.of(
                    Block.box(5.950000000000003, 9.8, 6.9499999999999975, 6.950000000000003, 11.8, 8.949999999999998),
                    Block.box(5.950000000000003, 5.800000000000001, 8.949999999999998, 6.950000000000003, 7.800000000000001, 10.949999999999998),
                    Block.box(5.950000000000003, 3.8, 8.949999999999998, 6.950000000000003, 5.800000000000001, 10.949999999999998),
                    Block.box(5.950000000000003, 7.800000000000001, 8.949999999999998, 6.950000000000003, 9.8, 10.949999999999998),
                    Block.box(5.950000000000003, 9.8, 8.949999999999998, 6.950000000000003, 11.8, 10.949999999999998),
                    Block.box(5.950000000000003, 11.8, 8.949999999999998, 6.950000000000003, 13.8, 10.949999999999998),
                    Block.box(5.950000000000003, 5.800000000000001, 10.949999999999998, 6.950000000000003, 7.800000000000001, 12.949999999999994),
                    Block.box(5.950000000000003, 7.800000000000001, 10.949999999999998, 6.950000000000003, 9.8, 12.949999999999994),
                    Block.box(5.950000000000003, 9.8, 10.949999999999998, 6.950000000000003, 11.8, 12.949999999999994),
                    Block.box(5.950000000000003, 7.800000000000001, 12.949999999999994, 6.950000000000003, 9.8, 14.949999999999996),
                    Block.box(5.950000000000003, 7.800000000000001, 6.9499999999999975, 6.950000000000003, 9.8, 8.949999999999998),
                    Block.box(5.950000000000003, 7.800000000000001, 2.950000000000004, 6.950000000000003, 9.8, 4.9499999999999975),
                    Block.box(5.950000000000003, 5.800000000000001, 2.950000000000004, 6.950000000000003, 7.800000000000001, 4.9499999999999975),
                    Block.box(5.950000000000003, 9.8, 2.950000000000004, 6.950000000000003, 11.8, 4.9499999999999975),
                    Block.box(5.950000000000003, 7.800000000000001, 0.9500000000000027, 6.950000000000003, 9.8, 2.950000000000004),
                    Block.box(5.950000000000003, 7.800000000000001, 4.9499999999999975, 6.950000000000003, 9.8, 6.9499999999999975),
                    Block.box(5.950000000000003, 5.800000000000001, 4.9499999999999975, 6.950000000000003, 7.800000000000001, 6.9499999999999975),
                    Block.box(5.950000000000003, 3.8, 4.9499999999999975, 6.950000000000003, 5.800000000000001, 6.9499999999999975),
                    Block.box(5.950000000000003, 11.8, 4.9499999999999975, 6.950000000000003, 13.8, 6.9499999999999975),
                    Block.box(5.950000000000003, 13.8, 5.9499999999999975, 6.950000000000003, 14.8, 6.9499999999999975),
                    Block.box(5.950000000000003, 11.8, 3.9500000000000033, 6.950000000000003, 12.8, 4.9499999999999975),
                    Block.box(5.950000000000003, 9.8, 1.9500000000000042, 6.950000000000003, 10.8, 2.950000000000004),
                    Block.box(5.950000000000003, 9.8, 1.4500000000000028, 6.950000000000003, 10.3, 1.9500000000000042),
                    Block.box(5.950000000000003, 10.8, 2.450000000000004, 6.950000000000003, 11.3, 2.950000000000004),
                    Block.box(5.950000000000003, 11.8, 3.450000000000004, 6.950000000000003, 12.3, 3.9500000000000033),
                    Block.box(5.950000000000003, 12.8, 4.450000000000001, 6.950000000000003, 13.3, 4.9499999999999975),
                    Block.box(5.950000000000003, 13.8, 5.4499999999999975, 6.950000000000003, 14.3, 5.9499999999999975),
                    Block.box(5.950000000000003, 14.8, 6.4499999999999975, 6.950000000000003, 15.3, 6.9499999999999975),
                    Block.box(5.950000000000003, 14.8, 8.949999999999998, 6.950000000000003, 15.3, 9.449999999999998),
                    Block.box(5.950000000000003, 13.8, 9.949999999999998, 6.950000000000003, 14.3, 10.449999999999998),
                    Block.box(5.950000000000003, 12.8, 10.949999999999998, 6.950000000000003, 13.3, 11.449999999999996),
                    Block.box(5.950000000000003, 10.8, 12.949999999999994, 6.950000000000003, 11.3, 13.449999999999994),
                    Block.box(5.950000000000003, 9.8, 13.949999999999994, 6.950000000000003, 10.3, 14.449999999999996),
                    Block.box(5.950000000000003, 7.300000000000001, 13.949999999999994, 6.950000000000003, 7.800000000000001, 14.449999999999996),
                    Block.box(5.950000000000003, 6.300000000000001, 12.949999999999994, 6.950000000000003, 6.800000000000001, 13.449999999999994),
                    Block.box(5.950000000000003, 5.300000000000001, 11.949999999999994, 6.950000000000003, 5.800000000000001, 12.449999999999994),
                    Block.box(5.950000000000003, 4.300000000000001, 10.949999999999998, 6.950000000000003, 4.800000000000001, 11.449999999999996),
                    Block.box(5.950000000000003, 3.3, 9.949999999999998, 6.950000000000003, 3.8, 10.449999999999998),
                    Block.box(5.950000000000003, 2.3, 8.949999999999998, 6.950000000000003, 2.8, 9.449999999999998),
                    Block.box(5.950000000000003, 2.3, 6.4499999999999975, 6.950000000000003, 2.8, 6.9499999999999975),
                    Block.box(5.950000000000003, 3.3, 5.4499999999999975, 6.950000000000003, 3.8, 5.9499999999999975),
                    Block.box(5.950000000000003, 4.300000000000001, 4.450000000000001, 6.950000000000003, 4.800000000000001, 4.9499999999999975),
                    Block.box(5.950000000000003, 5.300000000000001, 3.450000000000004, 6.950000000000003, 5.800000000000001, 3.9500000000000033),
                    Block.box(5.950000000000003, 6.300000000000001, 2.450000000000004, 6.950000000000003, 6.800000000000001, 2.950000000000004),
                    Block.box(5.950000000000003, 7.300000000000001, 1.4500000000000028, 6.950000000000003, 7.800000000000001, 1.9500000000000042),
                    Block.box(5.950000000000003, 11.8, 11.949999999999994, 6.950000000000003, 12.3, 12.449999999999994),
                    Block.box(5.950000000000003, 4.800000000000001, 3.9500000000000033, 6.950000000000003, 5.800000000000001, 4.9499999999999975),
                    Block.box(5.950000000000003, 2.8, 5.9499999999999975, 6.950000000000003, 3.8, 6.9499999999999975),
                    Block.box(5.950000000000003, 2.8, 8.949999999999998, 6.950000000000003, 3.8, 9.949999999999998),
                    Block.box(5.950000000000003, 4.800000000000001, 10.949999999999998, 6.950000000000003, 5.800000000000001, 11.949999999999994),
                    Block.box(5.950000000000003, 6.800000000000001, 12.949999999999994, 6.950000000000003, 7.800000000000001, 13.949999999999994),
                    Block.box(5.950000000000003, 9.8, 12.949999999999994, 6.950000000000003, 10.8, 13.949999999999994),
                    Block.box(5.950000000000003, 11.8, 10.949999999999998, 6.950000000000003, 12.8, 11.949999999999994),
                    Block.box(5.950000000000003, 13.8, 8.949999999999998, 6.950000000000003, 14.8, 9.949999999999998),
                    Block.box(5.950000000000003, 6.800000000000001, 1.9500000000000042, 6.950000000000003, 7.800000000000001, 2.950000000000004),
                    Block.box(5.950000000000003, 9.8, 4.9499999999999975, 6.950000000000003, 11.8, 6.9499999999999975),
                    Block.box(5.950000000000003, 5.800000000000001, 6.9499999999999975, 6.950000000000003, 7.800000000000001, 8.949999999999998),
                    Block.box(5.950000000000003, 3.8, 6.9499999999999975, 6.950000000000003, 5.800000000000001, 8.949999999999998),
                    Block.box(5.950000000000003, 1.7999999999999998, 6.9499999999999975, 6.950000000000003, 3.8, 8.949999999999998),
                    Block.box(5.950000000000003, 11.8, 6.9499999999999975, 6.950000000000003, 13.8, 8.949999999999998),
                    Block.box(5.950000000000003, 13.8, 6.9499999999999975, 6.950000000000003, 15.8, 8.949999999999998),
                    Block.box(6.950000000000003, -0.2, 6.9499999999999975, 8.950000000000003, 15.8, 8.949999999999998)
            ).reduce((v1, v2) -> Shapes.join(v1, v2, BooleanOp.OR)).get();

    public VoxelShape getShape(BlockState p_54126_, BlockGetter p_54127_, BlockPos p_54128_, CollisionContext p_54129_) {
        switch (p_54126_.getValue(FACING)) {
            case SOUTH:
                return SHAPE_S;
            case WEST:
                return SHAPE_W;
            case EAST:
                return SHAPE_E;
            default:
                return SHAPE_N;
        }
    }

    protected void createBlockStateDefinition(StateDefinition.Builder p_54122_) {
        p_54122_.add(FACING);
    }

    public BlockState getStateForPlacement(BlockPlaceContext p_54124_) {
        return this.defaultBlockState().setValue(FACING, p_54124_.getHorizontalDirection().getOpposite());
    }

}
